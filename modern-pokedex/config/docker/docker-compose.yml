version: '3.8'

services:
  # Development server
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
    container_name: modern-pokedex-dev
    ports:
      - "3000:3000"
      - "24678:24678" # Vite HMR port
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000/api
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    tty: true
    networks:
      - pokedex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production build (for testing)
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: modern-pokedex-prod
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
    networks:
      - pokedex-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: modern-pokedex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - pokedex-network
    restart: unless-stopped
    profiles:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: modern-pokedex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pokedex123}
    networks:
      - pokedex-network
    restart: unless-stopped
    profiles:
      - cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (if needed for future features)
  postgres:
    image: postgres:15-alpine
    container_name: modern-pokedex-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pokedex}
      - POSTGRES_USER=${POSTGRES_USER:-pokedex}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pokedex123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - pokedex-network
    restart: unless-stopped
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pokedex}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: modern-pokedex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pokedex-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: modern-pokedex-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - pokedex-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  pokedex-network:
    driver: bridge
    name: pokedex-network

volumes:
  redis-data:
    name: modern-pokedex-redis-data
  postgres-data:
    name: modern-pokedex-postgres-data
  prometheus-data:
    name: modern-pokedex-prometheus-data
  grafana-data:
    name: modern-pokedex-grafana-data